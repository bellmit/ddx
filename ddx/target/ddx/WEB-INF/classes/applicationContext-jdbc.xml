<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
	       http://www.springframework.org/schema/beans
	       http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	       http://www.springframework.org/schema/tx
	       http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
	       http://www.springframework.org/schema/aop
	       http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
	       http://www.springframework.org/schema/context
	       http://www.springframework.org/schema/context/spring-context-3.2.xsd">
    
    <!-- 开启aop注解支持 -->
    <aop:aspectj-autoproxy/>
    
    <!-- 开启注解bean扫描 -->
	<context:component-scan base-package="com.upcera"/>  
	
	<!-- 	加载数据库属性文件 -->
	<context:property-placeholder location="classpath*:/db.properties"/>  
	
	<!-- 数据源配置 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
	  <property name="driverClass" value="${db.driverClass}"/>
	  <property name="jdbcUrl" value="${db.url}"/>
	  <property name="user" value="${db.username}"/>
	  <property name="password" value="${db.password}"/>
	  <!--连接池中保留的最小连接数。-->
	  <property name="minPoolSize" value="2" />
	  <!--连接池中保留的最大连接数。-->
	  <property name="maxPoolSize" value="100" />
	  <!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。-->
	  <property name="maxIdleTime" value="1800" />
	  <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。-->
	  <property name="acquireIncrement" value="2" />
	  <property name="maxStatements" value="0" />
	  <!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。-->
	  <property name="initialPoolSize" value="2" />
	   <!--每60秒检查所有连接池中的空闲连接。-->
	  <property name="idleConnectionTestPeriod" value="1800" />
	  <!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 --> 
	  <property name="acquireRetryAttempts" value="30" />
	  <!--
	  	获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效
		保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试
		获取连接失败后该数据源将申明已断开并永久关闭。Default: false
	  -->
	  <property name="breakAfterAcquireFailure" value="true" />
	  <!--
	   	因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的
         时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable
         等方法来提升连接测试的性能。Default: false 
      -->
	  <property name="testConnectionOnCheckout" value="false" />
	</bean>
    
    <!-- 配置SessionFactory -->
  	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
    	<property name="dataSource" ref="dataSource"/>
    	<property name="packagesToScan" value="com.upcera"/>
        <property name="hibernateProperties">
            <props>
                <!-- 指定数据库的方言  -->
                <prop key="hibernate.dialect">${db.hibernate.dialect}</prop>
                <!-- 启动应用时,是否根据Hibernate映射自动创建数据表 -->
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>  
				<prop key="hibernate.jdbc.fetch_size">50</prop>
				<prop key="hibernate.jdbc.batch_size">30</prop>
				<!-- 开启查询缓存 -->
				<prop key="hibernate.cache.use_query_cache">false</prop>
				<prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop>
            </props>
        </property>
    </bean>
	
	<!-- 定义事务管理器 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
   		<property name="sessionFactory" ref="sessionFactory"/>
  	</bean>

	<!-- 配置事务的传播特性 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
    	<tx:attributes>
      		<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
	        <tx:method name="update*" propagation="REQUIRED" />
	        <tx:method name="batch*" propagation="REQUIRED" />
	        <!-- hibernate4必须配置为开启事务 否则 getCurrentSession()获取不到 -->
            <tx:method name="get*" propagation="REQUIRED" read-only="true" />  
            <tx:method name="count*" propagation="REQUIRED" read-only="true" />  
            <tx:method name="find*" propagation="REQUIRED" read-only="true" />  
            <tx:method name="list*" propagation="REQUIRED" read-only="true" />  
	        <tx:method name="*" read-only="true"/>
	        
    	</tx:attributes>
  	</tx:advice>

	<!-- 哪些类的哪些方法参与事务  -->
  	<aop:config>
  		<!-- 只对业务逻辑层实施事务 -->  
    	<aop:pointcut id="serviceMethods" expression="execution(* com..service..*.*(..))"/>
    	<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethods"/>
  	</aop:config>
	
	<!-- 刷新工序和工序特征缓存 -->
	<bean id="cacheBean" class="com.upcera.ddx.common.cache.impl.BaseCache"/>
	<aop:config>
	    <aop:aspect id="refreshCacheAop" ref="cacheBean">
	      <aop:pointcut id="target" expression="execution(* com.upcera.ddx.service.lab.ILabProcedureService.add*(..))
	      || execution(* com.upcera.ddx.service.lab.ILabProcedureService.batch*(..))
	      || execution(* com.upcera.ddx.service.lab.ILabProcedureService.delete*(..))
	      || execution(* com.upcera.ddx.service.lab.ILabProcedureService.update*(..))
	      || execution(* com.upcera.ddx.service.lab.ILabProceduresCharacterisService.add*(..))
	      || execution(* com.upcera.ddx.service.lab.ILabProceduresCharacterisService.batch*(..))
	      || execution(* com.upcera.ddx.service.lab.ILabProceduresCharacterisService.delete*(..))
	      || execution(* com.upcera.ddx.service.lab.ILabProceduresCharacterisService.update*(..))"/>
	      <aop:after method="refreshCacheByAOP" pointcut-ref="target"/>
	    </aop:aspect>
  	</aop:config>
  
</beans>
